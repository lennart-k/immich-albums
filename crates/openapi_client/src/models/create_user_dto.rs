/*
 * Immich
 *
 * Immich API
 *
 * The version of the OpenAPI document: 1.103.1
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateUserDto {
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "memoriesEnabled", skip_serializing_if = "Option::is_none")]
    pub memories_enabled: Option<bool>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "notify", skip_serializing_if = "Option::is_none")]
    pub notify: Option<bool>,
    #[serde(rename = "password")]
    pub password: String,
    #[serde(rename = "quotaSizeInBytes", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub quota_size_in_bytes: Option<Option<i64>>,
    #[serde(rename = "shouldChangePassword", skip_serializing_if = "Option::is_none")]
    pub should_change_password: Option<bool>,
    #[serde(rename = "storageLabel", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub storage_label: Option<Option<String>>,
}

impl CreateUserDto {
    pub fn new(email: String, name: String, password: String) -> CreateUserDto {
        CreateUserDto {
            email,
            memories_enabled: None,
            name,
            notify: None,
            password,
            quota_size_in_bytes: None,
            should_change_password: None,
            storage_label: None,
        }
    }
}

